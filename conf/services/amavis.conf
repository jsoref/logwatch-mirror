
###########################################################################
# $Id$
###########################################################################

# You can put comments anywhere you want to.  They are effective for the
# rest of the line.

# this is in the format of <name> = <value>.  Whitespace at the beginning
# and end of the lines is removed.  Whitespace before and after the = sign
# is removed.  Everything is case *insensitive*.

# Yes = True  = On  = 1
# No  = False = Off = 0

Title = "Amavisd-new"

# Which logfile group...
LogFile = maillog

# Specifies the global maximum detail level
#
#Detail = 10

# Only give lines pertaining to the amavis service...
#
# The variables OnlyService and amavis_Syslog_Name are regular
# expression patterns, and should both be set to match the
# amavis service name used in your syslog entries.
#*OnlyService = (usr/sbin/amavisd|dccproc)
*OnlyService = (amavis|dccproc)
*RemoveHeaders

# Set this to the service name used in amavis syslog entries
#
# Note: if you use parenthesis in your regular expression, be sure it
# is cloistering and not capturing: use (?:pattern) instead of (pattern).
# $amavis_Syslog_Name = "/usr/sbin/amavisd"
$amavis_Syslog_Name = "(?:amavis|dccproc)"

#
# Set the variable below to specify the maximum report width.
# for Detail <= 10
#
$amavis_Max_Report_Width = 100

# Specifies how to handle line lengths greater than Max_Report_Width.
# Options are Truncate (default), Wrap, or Full.
# for Detail <= 10
#
$amavis_Line_Style = Truncate

# Show names of detail section variables/command line options in 
# detail report titles.  For command line, use --[no]sect_vars,
# without an argument.
# 
$amavis_Show_Sect_Vars = No

# In reports, for tallying purposes, use (and show) only the first
# recipient when a message contains multiple recipients.
# 
$amavis_Show_First_Recip_Only = No

# Include a by-contents category grouping in the summary report.
# 
$amavis_Show_By_Ccat_Summary = Yes

# Amavis Timings Report
#
# Specifies the percentiles of collected data to show in the timing report.
# Valid values are from 0 to 100, inclusive.
#
$amavis_Timings_Percentiles = "0 5 25 50 75 95 100"

# 
# Show top N percent of the amavis scan timings report
# 
$amavis_Timings = 95

# Amavis SpamAssassin Timings Report
#
# Specifies the percentiles of collected data to show in the
# SpamAssassin timing report (requires amavis 2.6+, SA 3.3+).
# Valid values are from 0 to 100, inclusive.
#
$amavis_SA_Timings_Percentiles = "0 5 25 50 75 95 100"

# 
# Show top N rows of the SpamAssassin timings report
# Requires: amavis 2.6+, SpamAssassin 3.3+ 
# 
$amavis_SA_Timings = 100

# Spam Score Percentiles Report
#
# Specifies the percentiles shown in the spam scores frequency report. 
# Valid values range from 0 to 100, inclusive.  The keyword "default"
# can be used instead to reset the values to their built-in default.
# 
$amavis_Score_Percentiles = "0 50 90 95 98 100"

# Spam Score Frequency Report
#
# Specifies the buckets shown in the spam scores frequency  report. 
# Valid values are real numbers.  The keyword "default"
# can be used instead to reset the values to their built-in default.
# 
$amavis_Score_Frequencies = "-10 -5 0 5 10 20 30"

# SpamAssassin Spam / Ham Rules Hit Report
# 
# Specifies the number of top S spam and top H ham hits to show in the
# SpamAssassin Spam and Ham rules hit report.  The value is a list
# separated by whitespace or a comma.  The order is "spam,ham". The
# keyword "all" means unlimited limit, and 0 specifies none.  For
# example, the value "all,10" would show all Spam rules hit, but only
# the top 10 ham rules, whereas "0,all" would prevent the Spam hit
# report, and show all the hit Ham rules.
#
$amavis_SARules  = "20 20"

# Autolearn Report
#
# Shows the autolearn report when autolearn entries are present in
# amavis log entries.  To make these available, the default
# $log_templ variable needs to be modified.  This can be done by 
# uncommenting two lines in the amavis program itself (where the
# default log templates reside), by correctly adding the $log_templ
# variable to the amavisd.conf file.  See amavis' README.customize
# and the end of the amavisd program, searching for "autolearn".
$amavis_Show_Autolearn = Yes

# If available, show most recent amavis startup details
# 
$amavis_Show_StartInfo = Yes

# Show the summary section.  For command line, use --[no]summary,
# without an argument.
$amavis_Show_Summary = Yes

# Level Limiters
#
# The variables below control the maximum output level for a given
# category.  A level of 1 indicates only one level of detailed output
# in the Detailed report section.  The Summary section is only avail-
# able at logwatch --Detail level >= 5.  Increasing the Detail level
# by one adds one level of additional detail in the Summary section.
#
# For example, Detail 5 would output one additional level of detail,
# Detail 6 two levels, etc. all the way up to 10.  Finally, Detail
# 11 yields uncropped lines of output.
#
# You can control the maximum number of level 1 lines by appending
# a period and a number. The value 2.10 would indicate 2 levels
# of detail, but only 10 level 1 lines.  For example, setting
# $amavis_SpamBlocked = 1.20 yields a top 20 list of blocked spam.
#
# A more  useful form of limiting uses triplets in the form l:n:t.
# This  triplet specifies level l, top n, and minimum threshold t.
# Each of the values are integers, with l being the level  limiter
# as described above, n being a top n limiter for the level l, and
# t being the threshold limiter for level l.  When both  n  and  t
# are  specified, n has priority, allowing top n lists (regardless
# of threshold value).  If the value of l is omitted,  the  speci-
# fied  values for n and/or t are used for all levels available in
# the sub-section.  This permits a simple form of wildcarding (eg.
# place  minimum  threshold  limits on all levels).  However, spe-
# cific limiters always override  wildcard  limiters.   The  first
# form  of  level limiter may be included in levelspec to restrict
# output, regardless of how many triplets are present.

$amavis_CleanPassed = 0
$amavis_CleanBlocked = 10
$amavis_SpamPassed = 10
$amavis_SpamBlocked = 10
$amavis_SpammyPassed = 10
$amavis_SpammyBlocked = 10
$amavis_MalwarePassed = 10
$amavis_MalwareBlocked = 10
$amavis_BannedNamePassed = 10
$amavis_BannedNameBlocked = 10
$amavis_BadHeaderPassed = 10
$amavis_BadHeaderBlocked = 10
$amavis_MTABlocked = 10
$amavis_OversizedBlocked = 10
$amavis_OtherBlocked = 10

$amavis_AVConnectFailure = 10
$amavis_AVTimeout = 10
$amavis_ArchiveExtract = 10
$amavis_BadHeaderSupp = 10
$amavis_Bayes = 10
$amavis_Blacklisted = 10
$amavis_BounceKilled = 10
$amavis_BounceRescued = 10
$amavis_BounceUnverifiable = 10
$amavis_ContentType = 10
$amavis_DccError = 10
$amavis_DefangError = 10
$amavis_Defanged = 10
$amavis_DsnNotification = 10
$amavis_DsnSuppressed = 10
$amavis_ExtraModules = 10
$amavis_FakeSender = 10
$amavis_LocalDeliverySkipped = 10
$amavis_MalwareByScanner = 10
$amavis_MalwareToSpam = 10
$amavis_MimeError = 10
$amavis_p0f = 2
$amavis_Released = 10
$amavis_SADiags = 10
$amavis_SmtpResponse = 10
$amavis_TmpPreserved = 10
$amavis_VirusScanSkipped = 1
$amavis_Warning = 10
$amavis_WarningAddressModified = 2
$amavis_WarningNoQuarantineID = 1
$amavis_WarningSecurity = 10
$amavis_WarningSmtpShutdown = 10
$amavis_WarningSQL = 10
$amavis_Whitelisted = 10


# vi: shiftwidth=3 tabstop=3 et
